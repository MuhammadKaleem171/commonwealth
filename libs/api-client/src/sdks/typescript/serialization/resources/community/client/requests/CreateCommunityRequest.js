'use strict';
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding =
  (this && this.__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (
          !desc ||
          ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)
        ) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            },
          };
        }
        Object.defineProperty(o, k2, desc);
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
var __setModuleDefault =
  (this && this.__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', { enumerable: true, value: v });
      }
    : function (o, v) {
        o['default'] = v;
      });
var __importStar =
  (this && this.__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
Object.defineProperty(exports, '__esModule', { value: true });
exports.CreateCommunityRequest = void 0;
const core = __importStar(require('../../../../../core'));
const CreateCommunityRequestType_1 = require('../../types/CreateCommunityRequestType');
const CreateCommunityRequestBase_1 = require('../../types/CreateCommunityRequestBase');
exports.CreateCommunityRequest = core.serialization.object({
  id: core.serialization.string(),
  name: core.serialization.string(),
  chainNodeId: core.serialization.property(
    'chain_node_id',
    core.serialization.number(),
  ),
  description: core.serialization.string().optional(),
  iconUrl: core.serialization.property(
    'icon_url',
    core.serialization.string().optional(),
  ),
  socialLinks: core.serialization.property(
    'social_links',
    core.serialization.list(core.serialization.string()).optional(),
  ),
  tags: core.serialization.list(core.serialization.string()).optional(),
  directoryPageEnabled: core.serialization.property(
    'directory_page_enabled',
    core.serialization.boolean().optional(),
  ),
  type: CreateCommunityRequestType_1.CreateCommunityRequestType.optional(),
  base: CreateCommunityRequestBase_1.CreateCommunityRequestBase,
  userAddress: core.serialization.property(
    'user_address',
    core.serialization.string(),
  ),
  tokenName: core.serialization.property(
    'token_name',
    core.serialization.string().optional(),
  ),
  defaultSymbol: core.serialization.property(
    'default_symbol',
    core.serialization.string(),
  ),
  website: core.serialization.string().optional(),
  github: core.serialization.string().optional(),
  telegram: core.serialization.string().optional(),
  element: core.serialization.string().optional(),
  discord: core.serialization.string().optional(),
});
