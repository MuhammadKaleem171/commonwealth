'use strict';
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding =
  (this && this.__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (
          !desc ||
          ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)
        ) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            },
          };
        }
        Object.defineProperty(o, k2, desc);
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
var __setModuleDefault =
  (this && this.__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', { enumerable: true, value: v });
      }
    : function (o, v) {
        o['default'] = v;
      });
var __importStar =
  (this && this.__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
Object.defineProperty(exports, '__esModule', { value: true });
exports.GetCommentsResponseResultsItemThread = void 0;
const core = __importStar(require('../../../../core'));
const GetCommentsResponseResultsItemThreadLinksItem_1 = require('./GetCommentsResponseResultsItemThreadLinksItem');
const GetCommentsResponseResultsItemThreadDiscordMeta_1 = require('./GetCommentsResponseResultsItemThreadDiscordMeta');
const GetCommentsResponseResultsItemThreadSearch_1 = require('./GetCommentsResponseResultsItemThreadSearch');
const GetCommentsResponseResultsItemThreadAddress_1 = require('./GetCommentsResponseResultsItemThreadAddress');
const GetCommentsResponseResultsItemThreadTopic_1 = require('./GetCommentsResponseResultsItemThreadTopic');
const GetCommentsResponseResultsItemThreadCollaboratorsItem_1 = require('./GetCommentsResponseResultsItemThreadCollaboratorsItem');
const GetCommentsResponseResultsItemThreadReactionsItem_1 = require('./GetCommentsResponseResultsItemThreadReactionsItem');
const GetCommentsResponseResultsItemThreadThreadVersionHistoriesItem_1 = require('./GetCommentsResponseResultsItemThreadThreadVersionHistoriesItem');
exports.GetCommentsResponseResultsItemThread = core.serialization.object({
  id: core.serialization.number().optional(),
  addressId: core.serialization.property(
    'address_id',
    core.serialization.number(),
  ),
  title: core.serialization.string(),
  kind: core.serialization.string(),
  stage: core.serialization.string(),
  body: core.serialization.string().optional(),
  plaintext: core.serialization.string().optional(),
  url: core.serialization.string().optional(),
  topicId: core.serialization.property(
    'topic_id',
    core.serialization.number().optional(),
  ),
  pinned: core.serialization.boolean().optional(),
  communityId: core.serialization.property(
    'community_id',
    core.serialization.string(),
  ),
  viewCount: core.serialization.property(
    'view_count',
    core.serialization.number(),
  ),
  links: core.serialization
    .list(
      GetCommentsResponseResultsItemThreadLinksItem_1.GetCommentsResponseResultsItemThreadLinksItem,
    )
    .optional(),
  contentUrl: core.serialization.property(
    'content_url',
    core.serialization.string().optional(),
  ),
  readOnly: core.serialization.property(
    'read_only',
    core.serialization.boolean().optional(),
  ),
  hasPoll: core.serialization.property(
    'has_poll',
    core.serialization.boolean().optional(),
  ),
  canvasSignedData: core.serialization.property(
    'canvas_signed_data',
    core.serialization.string().optional(),
  ),
  canvasMsgId: core.serialization.property(
    'canvas_msg_id',
    core.serialization.string().optional(),
  ),
  createdAt: core.serialization.property(
    'created_at',
    core.serialization.date().optional(),
  ),
  updatedAt: core.serialization.property(
    'updated_at',
    core.serialization.date().optional(),
  ),
  lastEdited: core.serialization.property(
    'last_edited',
    core.serialization.date().optional(),
  ),
  deletedAt: core.serialization.property(
    'deleted_at',
    core.serialization.date().optional(),
  ),
  lastCommentedOn: core.serialization.property(
    'last_commented_on',
    core.serialization.date().optional(),
  ),
  markedAsSpamAt: core.serialization.property(
    'marked_as_spam_at',
    core.serialization.date().optional(),
  ),
  archivedAt: core.serialization.property(
    'archived_at',
    core.serialization.date().optional(),
  ),
  lockedAt: core.serialization.property(
    'locked_at',
    core.serialization.date().optional(),
  ),
  discordMeta: core.serialization.property(
    'discord_meta',
    GetCommentsResponseResultsItemThreadDiscordMeta_1.GetCommentsResponseResultsItemThreadDiscordMeta.optional(),
  ),
  reactionCount: core.serialization.property(
    'reaction_count',
    core.serialization.number(),
  ),
  reactionWeightsSum: core.serialization.property(
    'reaction_weights_sum',
    core.serialization.number(),
  ),
  commentCount: core.serialization.property(
    'comment_count',
    core.serialization.number(),
  ),
  activityRankDate: core.serialization.property(
    'activity_rank_date',
    core.serialization.date().optional(),
  ),
  createdBy: core.serialization.property(
    'created_by',
    core.serialization.string().optional(),
  ),
  profileName: core.serialization.property(
    'profile_name',
    core.serialization.string().optional(),
  ),
  search:
    GetCommentsResponseResultsItemThreadSearch_1.GetCommentsResponseResultsItemThreadSearch,
  address: core.serialization.property(
    'Address',
    GetCommentsResponseResultsItemThreadAddress_1.GetCommentsResponseResultsItemThreadAddress.optional(),
  ),
  topic:
    GetCommentsResponseResultsItemThreadTopic_1.GetCommentsResponseResultsItemThreadTopic.optional(),
  collaborators: core.serialization
    .list(
      GetCommentsResponseResultsItemThreadCollaboratorsItem_1.GetCommentsResponseResultsItemThreadCollaboratorsItem,
    )
    .optional(),
  reactions: core.serialization
    .list(
      GetCommentsResponseResultsItemThreadReactionsItem_1.GetCommentsResponseResultsItemThreadReactionsItem,
    )
    .optional(),
  threadVersionHistories: core.serialization.property(
    'ThreadVersionHistories',
    core.serialization
      .list(
        GetCommentsResponseResultsItemThreadThreadVersionHistoriesItem_1.GetCommentsResponseResultsItemThreadThreadVersionHistoriesItem,
      )
      .optional(),
  ),
});
