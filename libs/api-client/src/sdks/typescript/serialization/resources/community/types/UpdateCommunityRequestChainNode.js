'use strict';
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding =
  (this && this.__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (
          !desc ||
          ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)
        ) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            },
          };
        }
        Object.defineProperty(o, k2, desc);
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
var __setModuleDefault =
  (this && this.__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', { enumerable: true, value: v });
      }
    : function (o, v) {
        o['default'] = v;
      });
var __importStar =
  (this && this.__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
Object.defineProperty(exports, '__esModule', { value: true });
exports.UpdateCommunityRequestChainNode = void 0;
const core = __importStar(require('../../../../core'));
const UpdateCommunityRequestChainNodeBalanceType_1 = require('./UpdateCommunityRequestChainNodeBalanceType');
const UpdateCommunityRequestChainNodeCosmosGovVersion_1 = require('./UpdateCommunityRequestChainNodeCosmosGovVersion');
const UpdateCommunityRequestChainNodeHealth_1 = require('./UpdateCommunityRequestChainNodeHealth');
const UpdateCommunityRequestChainNodeContractsItem_1 = require('./UpdateCommunityRequestChainNodeContractsItem');
exports.UpdateCommunityRequestChainNode = core.serialization.object({
  id: core.serialization.number().optional(),
  url: core.serialization.string().optional(),
  ethChainId: core.serialization.property(
    'eth_chain_id',
    core.serialization.number().optional(),
  ),
  altWalletUrl: core.serialization.property(
    'alt_wallet_url',
    core.serialization.string().optional(),
  ),
  privateUrl: core.serialization.property(
    'private_url',
    core.serialization.string().optional(),
  ),
  balanceType: core.serialization.property(
    'balance_type',
    UpdateCommunityRequestChainNodeBalanceType_1.UpdateCommunityRequestChainNodeBalanceType.optional(),
  ),
  name: core.serialization.string().optional(),
  description: core.serialization.string().optional(),
  ss58: core.serialization.number().optional(),
  bech32: core.serialization.string().optional(),
  slip44: core.serialization.number().optional(),
  cosmosChainId: core.serialization.property(
    'cosmos_chain_id',
    core.serialization.string().optional(),
  ),
  cosmosGovVersion: core.serialization.property(
    'cosmos_gov_version',
    UpdateCommunityRequestChainNodeCosmosGovVersion_1.UpdateCommunityRequestChainNodeCosmosGovVersion.optional(),
  ),
  health:
    UpdateCommunityRequestChainNodeHealth_1.UpdateCommunityRequestChainNodeHealth.optional(),
  contracts: core.serialization
    .list(
      UpdateCommunityRequestChainNodeContractsItem_1.UpdateCommunityRequestChainNodeContractsItem,
    )
    .optional(),
  blockExplorer: core.serialization.property(
    'block_explorer',
    core.serialization.string().optional(),
  ),
  maxCeBlockRange: core.serialization.property(
    'max_ce_block_range',
    core.serialization.number().optional(),
  ),
  createdAt: core.serialization.property(
    'created_at',
    core.serialization.date().optional(),
  ),
  updatedAt: core.serialization.property(
    'updated_at',
    core.serialization.date().optional(),
  ),
});
