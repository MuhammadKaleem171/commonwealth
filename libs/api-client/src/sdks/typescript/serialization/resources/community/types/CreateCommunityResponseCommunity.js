'use strict';
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding =
  (this && this.__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (
          !desc ||
          ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)
        ) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            },
          };
        }
        Object.defineProperty(o, k2, desc);
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
var __setModuleDefault =
  (this && this.__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', { enumerable: true, value: v });
      }
    : function (o, v) {
        o['default'] = v;
      });
var __importStar =
  (this && this.__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
Object.defineProperty(exports, '__esModule', { value: true });
exports.CreateCommunityResponseCommunity = void 0;
const core = __importStar(require('../../../../core'));
const CreateCommunityResponseCommunityBase_1 = require('./CreateCommunityResponseCommunityBase');
const CreateCommunityResponseCommunityType_1 = require('./CreateCommunityResponseCommunityType');
const CreateCommunityResponseCommunitySocialLinksItem_1 = require('./CreateCommunityResponseCommunitySocialLinksItem');
const CreateCommunityResponseCommunityDefaultPage_1 = require('./CreateCommunityResponseCommunityDefaultPage');
const CreateCommunityResponseCommunityHasHomepage_1 = require('./CreateCommunityResponseCommunityHasHomepage');
const CreateCommunityResponseCommunityTerms_1 = require('./CreateCommunityResponseCommunityTerms');
const CreateCommunityResponseCommunityAddressesItem_1 = require('./CreateCommunityResponseCommunityAddressesItem');
const CreateCommunityResponseCommunityCommunityStakesItem_1 = require('./CreateCommunityResponseCommunityCommunityStakesItem');
const CreateCommunityResponseCommunityCommunityTagsItem_1 = require('./CreateCommunityResponseCommunityCommunityTagsItem');
const CreateCommunityResponseCommunityChainNode_1 = require('./CreateCommunityResponseCommunityChainNode');
const CreateCommunityResponseCommunityTopicsItem_1 = require('./CreateCommunityResponseCommunityTopicsItem');
const CreateCommunityResponseCommunityGroupsItem_1 = require('./CreateCommunityResponseCommunityGroupsItem');
const CreateCommunityResponseCommunityContestManagersItem_1 = require('./CreateCommunityResponseCommunityContestManagersItem');
exports.CreateCommunityResponseCommunity = core.serialization.object({
  id: core.serialization.string(),
  name: core.serialization.string(),
  chainNodeId: core.serialization.property(
    'chain_node_id',
    core.serialization.number().optional(),
  ),
  defaultSymbol: core.serialization.property(
    'default_symbol',
    core.serialization.string().optional(),
  ),
  network: core.serialization.string().optional(),
  base: CreateCommunityResponseCommunityBase_1.CreateCommunityResponseCommunityBase,
  iconUrl: core.serialization.property(
    'icon_url',
    core.serialization.string().optional(),
  ),
  active: core.serialization.boolean(),
  type: CreateCommunityResponseCommunityType_1.CreateCommunityResponseCommunityType.optional(),
  description: core.serialization.string().optional(),
  socialLinks: core.serialization.property(
    'social_links',
    core.serialization
      .list(
        CreateCommunityResponseCommunitySocialLinksItem_1.CreateCommunityResponseCommunitySocialLinksItem,
      )
      .optional(),
  ),
  ss58Prefix: core.serialization.property(
    'ss58_prefix',
    core.serialization.number().optional(),
  ),
  stagesEnabled: core.serialization.property(
    'stages_enabled',
    core.serialization.boolean().optional(),
  ),
  customStages: core.serialization.property(
    'custom_stages',
    core.serialization.list(core.serialization.string()).optional(),
  ),
  customDomain: core.serialization.property(
    'custom_domain',
    core.serialization.string().optional(),
  ),
  blockExplorerIds: core.serialization.property(
    'block_explorer_ids',
    core.serialization.string().optional(),
  ),
  collapsedOnHomepage: core.serialization.property(
    'collapsed_on_homepage',
    core.serialization.boolean().optional(),
  ),
  defaultSummaryView: core.serialization.property(
    'default_summary_view',
    core.serialization.boolean().optional(),
  ),
  defaultPage: core.serialization.property(
    'default_page',
    CreateCommunityResponseCommunityDefaultPage_1.CreateCommunityResponseCommunityDefaultPage.optional(),
  ),
  hasHomepage: core.serialization.property(
    'has_homepage',
    CreateCommunityResponseCommunityHasHomepage_1.CreateCommunityResponseCommunityHasHomepage.optional(),
  ),
  terms:
    CreateCommunityResponseCommunityTerms_1.CreateCommunityResponseCommunityTerms.optional(),
  adminOnlyPolling: core.serialization.property(
    'admin_only_polling',
    core.serialization.boolean().optional(),
  ),
  bech32Prefix: core.serialization.property(
    'bech32_prefix',
    core.serialization.string().optional(),
  ),
  hideProjects: core.serialization.property(
    'hide_projects',
    core.serialization.boolean().optional(),
  ),
  tokenName: core.serialization.property(
    'token_name',
    core.serialization.string().optional(),
  ),
  ceVerbose: core.serialization.property(
    'ce_verbose',
    core.serialization.boolean().optional(),
  ),
  discordConfigId: core.serialization.property(
    'discord_config_id',
    core.serialization.number().optional(),
  ),
  category: core.serialization.unknown().optional(),
  discordBotWebhooksEnabled: core.serialization.property(
    'discord_bot_webhooks_enabled',
    core.serialization.boolean().optional(),
  ),
  directoryPageEnabled: core.serialization.property(
    'directory_page_enabled',
    core.serialization.boolean().optional(),
  ),
  directoryPageChainNodeId: core.serialization.property(
    'directory_page_chain_node_id',
    core.serialization.number().optional(),
  ),
  namespace: core.serialization.string().optional(),
  namespaceAddress: core.serialization.property(
    'namespace_address',
    core.serialization.string().optional(),
  ),
  redirect: core.serialization.string().optional(),
  snapshotSpaces: core.serialization.property(
    'snapshot_spaces',
    core.serialization.list(core.serialization.string()).optional(),
  ),
  includeInDigestEmail: core.serialization.property(
    'include_in_digest_email',
    core.serialization.boolean().optional(),
  ),
  profileCount: core.serialization.property(
    'profile_count',
    core.serialization.number().optional(),
  ),
  lifetimeThreadCount: core.serialization.property(
    'lifetime_thread_count',
    core.serialization.number().optional(),
  ),
  bannerText: core.serialization.property(
    'banner_text',
    core.serialization.string().optional(),
  ),
  createdAt: core.serialization.property(
    'created_at',
    core.serialization.date().optional(),
  ),
  updatedAt: core.serialization.property(
    'updated_at',
    core.serialization.date().optional(),
  ),
  addresses: core.serialization.property(
    'Addresses',
    core.serialization
      .list(
        CreateCommunityResponseCommunityAddressesItem_1.CreateCommunityResponseCommunityAddressesItem,
      )
      .optional(),
  ),
  communityStakes: core.serialization.property(
    'CommunityStakes',
    core.serialization
      .list(
        CreateCommunityResponseCommunityCommunityStakesItem_1.CreateCommunityResponseCommunityCommunityStakesItem,
      )
      .optional(),
  ),
  communityTags: core.serialization.property(
    'CommunityTags',
    core.serialization
      .list(
        CreateCommunityResponseCommunityCommunityTagsItem_1.CreateCommunityResponseCommunityCommunityTagsItem,
      )
      .optional(),
  ),
  chainNode: core.serialization.property(
    'ChainNode',
    CreateCommunityResponseCommunityChainNode_1.CreateCommunityResponseCommunityChainNode.optional(),
  ),
  topics: core.serialization
    .list(
      CreateCommunityResponseCommunityTopicsItem_1.CreateCommunityResponseCommunityTopicsItem,
    )
    .optional(),
  groups: core.serialization
    .list(
      CreateCommunityResponseCommunityGroupsItem_1.CreateCommunityResponseCommunityGroupsItem,
    )
    .optional(),
  contestManagers: core.serialization.property(
    'contest_managers',
    core.serialization
      .list(
        CreateCommunityResponseCommunityContestManagersItem_1.CreateCommunityResponseCommunityContestManagersItem,
      )
      .optional(),
  ),
});
